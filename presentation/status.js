window.testStatus = [{message: "OK ...... 1. nil on empty list: True is True", type: "PASS"}, {message: "OK ...... 1. nil on empty list: False is False", type: "PASS"}, {message: "OK ...... 2. The first element in the init of a list: 1 is 1", type: "PASS"}, {message: "OK ...... 2. The second element in the init of a list: 2 is 2", type: "PASS"}, {message: "OK ...... 2. The init length should be 2: NIL is NIL", type: "PASS"}, {message: "OK ...... 3. tail of a list: 3 is 3", type: "PASS"}, {message: "OK ...... 3. tail of a singleton list: 1 is 1", type: "PASS"}, {message: "OK ......  4. Element should not be found in an empty list: False is False", type: "PASS"}, {message: "OK ......  4. Existing element is first: True is True", type: "PASS"}, {message: "OK ......  4. Existing element is last: True is True", type: "PASS"}, {message: "OK ......  4. Existing element in a singleton list: True is True", type: "PASS"}, {message: "OK ......  4. Non-existing element: False is False", type: "PASS"}, {message: "OK ......  5. The length of an empty list should be 0: 0 is 0", type: "PASS"}, {message: "OK ......  5. The length of a singleton list should be 1: 1 is 1", type: "PASS"}, {message: "OK ......  5. The length of a list with 3 elements should be 3: 3 is 3", type: "PASS"}, {message: "OK ......  6. Taking 0 from Nil: NIL is NIL", type: "PASS"}, {message: "OK ......  6. Taking 3 from Nil: NIL is NIL", type: "PASS"}, {message: "OK ......  6. Taking 0 from a list of 3: NIL is NIL", type: "PASS"}, {message: "OK ......  6. Taking 1 from a list of 3: {'_head': 1, '_tail': 'NIL'} is {'_head': 1, '_tail': 'NIL'}", type: "PASS"}, {message: "OK ......  6. Taking 2 from a list of 3: {'_head': 1, '_tail': {'_head': 2, '_tail': 'NIL'}} is {'_head': 1, '_tail': {'_head': 2, '_tail': 'NIL'}}", type: "PASS"}, {message: "OK ......  6. Taking 3 from a list of 3: {'_head': 1, '_tail': {'_head': 2, '_tail': {'_head': 3, '_tail': 'NIL'}}} is {'_head': 1, '_tail': {'_head': 2, '_tail': {'_head': 3, '_tail': 'NIL'}}}", type: "PASS"}, {message: "OK ......  6. Taking 4 from a list of 3: {'_head': 1, '_tail': {'_head': 2, '_tail': {'_head': 3, '_tail': 'NIL'}}} is {'_head': 1, '_tail': {'_head': 2, '_tail': {'_head': 3, '_tail': 'NIL'}}}", type: "PASS"}, {message: "OK ......  7. Dropping 0 from Nil: NIL is NIL", type: "PASS"}, {message: "OK ......  7. Dropping 3 from Nil: NIL is NIL", type: "PASS"}, {message: "OK ......  7. Dropping 0 from a list of 3: {'_head': 1, '_tail': {'_head': 2, '_tail': {'_head': 3, '_tail': 'NIL'}}} is {'_head': 1, '_tail': {'_head': 2, '_tail': {'_head': 3, '_tail': 'NIL'}}}", type: "PASS"}, {message: "OK ......  7. Dropping 1 from a list of 3: {'_head': 2, '_tail': {'_head': 3, '_tail': 'NIL'}} is {'_head': 2, '_tail': {'_head': 3, '_tail': 'NIL'}}", type: "PASS"}, {message: "OK ......  7. Dropping 2 from a list of 3: {'_head': 3, '_tail': 'NIL'} is {'_head': 3, '_tail': 'NIL'}", type: "PASS"}, {message: "OK ......  7. Dropping 3 from a list of 3: NIL is NIL", type: "PASS"}, {message: "OK ......  7. Dropping 4 from a list of 3: NIL is NIL", type: "PASS"}, {message: "OK ......  8. Empty list equality: True is True", type: "PASS"}, {message: "OK ......  8. Non-empty list equality: True is True", type: "PASS"}, {message: "OK ......  8. Long and short lists: False is False", type: "PASS"}, {message: "OK ......  8. Short and long lists: False is False", type: "PASS"}, {message: "OK ......  8. Same length lists with non-equal element: False is False", type: "PASS"}, {message: "OK ......  8. Empty and non-empty lists: False is False", type: "PASS"}, {message: "OK ......  8. Non-empty and empty lists: False is False", type: "PASS"}, {message: "OK ......  9. Concating two empty lists should be an empty list: NIL is NIL", type: "PASS"}, {message: "OK ......  9. Concating an empty list and a non-empty list should be the non-empty list: {'_head': 1, '_tail': {'_head': 2, '_tail': {'_head': 3, '_tail': 'NIL'}}} is {'_head': 1, '_tail': {'_head': 2, '_tail': {'_head': 3, '_tail': 'NIL'}}}", type: "PASS"}, {message: "OK ......  9. Concating a non-empty list and an empty list should be the non-empty list: {'_head': 1, '_tail': {'_head': 2, '_tail': {'_head': 3, '_tail': 'NIL'}}} is {'_head': 1, '_tail': {'_head': 2, '_tail': {'_head': 3, '_tail': 'NIL'}}}", type: "PASS"}, {message: "OK ......  9. Concating two non-empty lists should be the second list appended to the first: {'_head': 1, '_tail': {'_head': 2, '_tail': {'_head': 3, '_tail': {'_head': 4, '_tail': 'NIL'}}}} is {'_head': 1, '_tail': {'_head': 2, '_tail': {'_head': 3, '_tail': {'_head': 4, '_tail': 'NIL'}}}}", type: "PASS"}, {message: "OK ...... 10. Reversing an empty list is the empty list: NIL is NIL", type: "PASS"}, {message: "OK ...... 10. Reversing a singleton list is the same list: {'_head': 1, '_tail': 'NIL'} is {'_head': 1, '_tail': 'NIL'}", type: "PASS"}, {message: "OK ...... 10. Reversing a list: {'_head': 3, '_tail': {'_head': 2, '_tail': {'_head': 1, '_tail': 'NIL'}}} is {'_head': 3, '_tail': {'_head': 2, '_tail': {'_head': 1, '_tail': 'NIL'}}}", type: "PASS"}, {message: "OK ...... 11. Filtering an empty list : NIL is NIL", type: "PASS"}, {message: "OK ...... 11. Filtering an empty list: NIL is NIL", type: "PASS"}, {message: "OK ...... 11. Filtering odd numbers: {'_head': 1, '_tail': {'_head': 3, '_tail': 'NIL'}} is {'_head': 1, '_tail': {'_head': 3, '_tail': 'NIL'}}", type: "PASS"}, {message: "OK ...... 12. Mapping over an empty list: NIL is NIL", type: "PASS"}, {message: "OK ...... 12. func_mapping with identity: {'_head': 1, '_tail': {'_head': 2, '_tail': {'_head': 3, '_tail': 'NIL'}}} is {'_head': 1, '_tail': {'_head': 2, '_tail': {'_head': 3, '_tail': 'NIL'}}}", type: "PASS"}, {message: "OK ...... 12. Mapping over a singleton list: {'_head': 4, '_tail': 'NIL'} is {'_head': 4, '_tail': 'NIL'}", type: "PASS"}, {message: "OK ...... 12. Mapping over a list: {'_head': 1, '_tail': {'_head': 4, '_tail': {'_head': 9, '_tail': 'NIL'}}} is {'_head': 1, '_tail': {'_head': 4, '_tail': {'_head': 9, '_tail': 'NIL'}}}", type: "PASS"}, {message: "OK ...... 13. Left folding an empty list to be the staring value: 0 is 0", type: "PASS"}, {message: "OK ...... 13. Left folding a list with plus: 6 is 6", type: "PASS"}, {message: "OK ...... 13. Left folding a list with minus: -6 is -6", type: "PASS"}]