window.testStatus = [{message: "OK ...... 1. nil on empty list_f: True is True", type: "PASS"}, {message: "OK ...... 1. nil on empty list_f: False is False", type: "PASS"}, {message: "OK ...... 2. The first element in the init of a list_f: 1 is 1", type: "PASS"}, {message: "OK ...... 2. The second element in the init of a list_f: 2 is 2", type: "PASS"}, {message: "OK ...... 2. The init length should be 2: NIL is NIL", type: "PASS"}, {message: "OK ...... 3. tail of a list_f: 3 is 3", type: "PASS"}, {message: "OK ...... 3. tail of a singleton list_f: 1 is 1", type: "PASS"}, {message: "OK ......  4. Element should not be found in an empty list_f: False is False", type: "PASS"}, {message: "OK ......  4. Existing element is first: True is True", type: "PASS"}, {message: "OK ......  4. Existing element is last: True is True", type: "PASS"}, {message: "OK ......  4. Existing element in a singleton list_f: True is True", type: "PASS"}, {message: "OK ......  4. Non-existing element: False is False", type: "PASS"}, {message: "OK ......  5. The length of an empty list_f should be 0: 0 is 0", type: "PASS"}, {message: "OK ......  5. The length of a singleton list_f should be 1: 1 is 1", type: "PASS"}, {message: "OK ......  5. The length of a list_f with 3 elements should be 3: 3 is 3", type: "PASS"}, {message: "OK ......  6. Taking 0 from Nil: NIL is NIL", type: "PASS"}, {message: "OK ......  6. Taking 3 from Nil: NIL is NIL", type: "PASS"}, {message: "OK ......  6. Taking 0 from a list_f of 3: NIL is NIL", type: "PASS"}, {message: "OK ......  6. Taking 1 from a list_f of 3: 1,NIL is 1,NIL", type: "PASS"}, {message: "OK ......  6. Taking 2 from a list_f of 3: 1,2,NIL is 1,2,NIL", type: "PASS"}, {message: "OK ......  6. Taking 3 from a list_f of 3: 1,2,3,NIL is 1,2,3,NIL", type: "PASS"}, {message: "OK ......  6. Taking 4 from a list_f of 3: 1,2,3,NIL is 1,2,3,NIL", type: "PASS"}, {message: "OK ......  7. Dropping 0 from Nil: NIL is NIL", type: "PASS"}, {message: "OK ......  7. Dropping 3 from Nil: NIL is NIL", type: "PASS"}, {message: "OK ......  7. Dropping 0 from a list_f of 3: 1,2,3,NIL is 1,2,3,NIL", type: "PASS"}, {message: "OK ......  7. Dropping 1 from a list_f of 3: 2,3,NIL is 2,3,NIL", type: "PASS"}, {message: "OK ......  7. Dropping 2 from a list_f of 3: 3,NIL is 3,NIL", type: "PASS"}, {message: "OK ......  7. Dropping 3 from a list_f of 3: NIL is NIL", type: "PASS"}, {message: "OK ......  7. Dropping 4 from a list_f of 3: NIL is NIL", type: "PASS"}, {message: "OK ......  8. Empty list_f equality: True is True", type: "PASS"}, {message: "OK ......  8. Non-empty list_f equality: True is True", type: "PASS"}, {message: "OK ......  8. Long and short lists: False is False", type: "PASS"}, {message: "OK ......  8. Short and long lists: False is False", type: "PASS"}, {message: "OK ......  8. Same length lists with non-equal element: False is False", type: "PASS"}, {message: "OK ......  8. Empty and non-empty lists: False is False", type: "PASS"}, {message: "OK ......  8. Non-empty and empty lists: False is False", type: "PASS"}, {message: "OK ......  9. Concatenating two empty lists should be an empty list_f: NIL is NIL", type: "PASS"}, {message: "OK ......  9. Concatenating an empty list_f and a non-empty list_f should be the non-empty list_f: 1,2,3,NIL is 1,2,3,NIL", type: "PASS"}, {message: "OK ......  9. Concatenating a non-empty list_f and an empty list_f should be the non-empty list_f: 1,2,3,NIL is 1,2,3,NIL", type: "PASS"}, {message: "OK ......  9. Concatenating two non-empty lists should be the second list_f appended to the first: 1,2,3,4,NIL is 1,2,3,4,NIL", type: "PASS"}, {message: "OK ...... 10. Reversing an empty list_f is the empty list_f: NIL is NIL", type: "PASS"}, {message: "OK ...... 10. Reversing a singleton list_f is the same list_f: 1,NIL is 1,NIL", type: "PASS"}, {message: "OK ...... 10. Reversing a list_f: 3,2,1,NIL is 3,2,1,NIL", type: "PASS"}, {message: "OK ...... 11. Filtering an empty list_f : NIL is NIL", type: "PASS"}, {message: "OK ...... 11. Filtering an empty list_f: NIL is NIL", type: "PASS"}, {message: "OK ...... 11. Filtering odd numbers: 1,3,NIL is 1,3,NIL", type: "PASS"}, {message: "OK ...... 12. Mapping over an empty list_f: NIL is NIL", type: "PASS"}, {message: "OK ...... 12. func_mapping with identity: 1,2,3,NIL is 1,2,3,NIL", type: "PASS"}, {message: "OK ...... 12. Mapping over a singleton list_f: 4,NIL is 4,NIL", type: "PASS"}, {message: "OK ...... 12. Mapping over a list_f: 1,4,9,NIL is 1,4,9,NIL", type: "PASS"}, {message: "OK ...... 13. Left folding an empty list_f to be the staring value: 0 is 0", type: "PASS"}, {message: "OK ...... 13. Left folding a list_f with plus: 6 is 6", type: "PASS"}, {message: "OK ...... 13. Left folding a list_f with minus: -6 is -6", type: "PASS"}, {message: "OK ...... 14. Right folding an empty list_f to be the staring value: 0 is 0", type: "PASS"}, {message: "OK ...... 14. Right folding a list_f with plus: 6 is 6", type: "PASS"}, {message: "OK ...... 14. Right folding a list_f with minus: 2 is 2", type: "PASS"}, {message: "OK ...... 15. Copy an empty list_f: NIL is NIL", type: "PASS"}, {message: "OK ...... 15. Copy a singleton list_f: 1,NIL is 1,NIL", type: "PASS"}, {message: "OK ...... 15. Copy a list_f: 1,2,3,NIL is 1,2,3,NIL", type: "PASS"}, {message: "OK ...... 16. Copy an empty list_f: NIL is NIL", type: "PASS"}, {message: "OK ...... 16. Copy a singleton list_f: 1,NIL is 1,NIL", type: "PASS"}, {message: "OK ...... 16. Copy a list_f: 1,2,3,NIL is 1,2,3,NIL", type: "PASS"}, {message: "OK ...... 17. Mapping over an empty list_f: NIL is NIL", type: "PASS"}, {message: "OK ...... 17. Mapping over a singleton list_f: 4,NIL is 4,NIL", type: "PASS"}, {message: "OK ...... 17. Mapping over a list_f: 1,4,9,NIL is 1,4,9,NIL", type: "PASS"}, {message: "OK ...... 18. Reversing an empty list_f is the empty list_f: NIL is NIL", type: "PASS"}, {message: "OK ...... 18. Reversing a singleton list_f is the same list_f: 1,NIL is 1,NIL", type: "PASS"}, {message: "OK ...... 18. Reversing a list_f: 3,2,1,NIL is 3,2,1,NIL", type: "PASS"}, {message: "OK ...... 19. Zipping empty lists: NIL is NIL", type: "PASS"}, {message: "OK ...... 19. Zipping an empty list_f and a list_f: NIL is NIL", type: "PASS"}, {message: "OK ...... 19. Zipping a list_f and an empty list_f: NIL is NIL", type: "PASS"}, {message: "OK ...... 19. Zipping two same-length lists: {'_fst_key': 1, '_snd_key': 10},{'_fst_key': 2, '_snd_key': 20},{'_fst_key': 3, '_snd_key': 30},NIL is {'_fst_key': 1, '_snd_key': 10},{'_fst_key': 2, '_snd_key': 20},{'_fst_key': 3, '_snd_key': 30},NIL", type: "PASS"}, {message: "OK ...... 19. Zipping two lists, the first is shorter: {'_fst_key': 1, '_snd_key': 10},{'_fst_key': 2, '_snd_key': 20},{'_fst_key': 3, '_snd_key': 30},NIL is {'_fst_key': 1, '_snd_key': 10},{'_fst_key': 2, '_snd_key': 20},{'_fst_key': 3, '_snd_key': 30},NIL", type: "PASS"}, {message: "OK ...... 19. Zipping two lists, the second is shorter: {'_fst_key': 1, '_snd_key': 10},{'_fst_key': 2, '_snd_key': 20},{'_fst_key': 3, '_snd_key': 30},NIL is {'_fst_key': 1, '_snd_key': 10},{'_fst_key': 2, '_snd_key': 20},{'_fst_key': 3, '_snd_key': 30},NIL", type: "PASS"}, {message: "OK ...... 20. unzipping empty lists: {'_fst_key': 'NIL', '_snd_key': 'NIL'} is {'_fst_key': 'NIL', '_snd_key': 'NIL'}", type: "PASS"}, {message: "OK ...... 20. unzipping a list_f: {'_fst_key': 1,2,3,NIL, '_snd_key': 10,20,30,NIL} is {'_fst_key': 1,2,3,NIL, '_snd_key': 10,20,30,NIL}", type: "PASS"}]